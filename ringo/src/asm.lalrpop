
use crate::inst::Insts;
grammar;

pub Main:Insts={
    <l:Label> ":" => Insts::LABEL(l),
    "lui"  <r:Reg>","<i:Imm> => Insts::LUI(r,i),
    "auipc"  <r:Reg>","<i:Imm> => Insts::AUIPC(r,i),
    "addi"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::ADDI(r,r2,i),
    "slti"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::SLTI(r,r2,i),
    "sltiu"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::SLTIU(r,r2,i),
    "xori"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::XORI(r,r2,i),
    "ori"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::ORI(r,r2,i),
    "andi"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::ANDI(r,r2,i),
    "slli"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::SLLI(r,r2,i),
    "srli"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::SRLI(r,r2,i),
    "srai"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::SRAI(r,r2,i),
    "add"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::ADD(r,r2,r3),
    "sub"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::SUB(r,r2,r3),
    "sll"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::SLL(r,r2,r3),
    "slt"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::SLT(r,r2,r3),
    "sltu"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::SLTU(r,r2,r3),
    "xor"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::XOR(r,r2,r3),
    "srl"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::SRL(r,r2,r3),
    "sra"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::SRA(r,r2,r3),
    "or"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::OR(r,r2,r3),
    "and"  <r:Reg>","<r2:Reg>","<r3:Reg> => Insts::AND(r,r2,r3),
    "fence" <i:Imm>","<i2:Imm> =>Insts::FENCE(i,i2),
    "fencei" => Insts::FENCEI,
    "csrrw" <r:Reg>","<i:Imm>","<r2:Reg>=>Insts::CSRRW(r,i,r2),
    "csrrs" <r:Reg>","<i:Imm>","<r2:Reg>=>Insts::CSRRS(r,i,r2),
    "csrrc" <r:Reg>","<i:Imm>","<r2:Reg>=>Insts::CSRRC(r,i,r2),
    "csrrwi"<r:Reg>","<i:Imm>","<i2:Imm>=>Insts::CSRRWI(r,i,i2),
    "csrrsi" <r:Reg>","<i:Imm>","<i2:Imm>=>Insts::CSRRSI(r,i,i2),
    "csrrci" <r:Reg>","<i:Imm>","<i2:Imm>=>Insts::CSRRCI(r,i,i2),
    "ecall" => Insts::ECALL,
    "ebreak" => Insts::EBREAK,
    "uret" => Insts::URET,
    "sret" => Insts::SRET,
    "mret" => Insts::MRET,
    "wfi" => Insts::WFI,
    "sfences.vma" <r:Reg>","<r2:Reg> => Insts::SFVMA(r,r2),
    "lb" <r:Reg>","<i:Imm>"("<r2:Reg>")" => Insts::LB(r,i,r2),
    "lh" <r:Reg>","<i:Imm>"("<r2:Reg>")" => Insts::LH(r,i,r2),
    "lw" <r:Reg>","<i:Imm>"("<r2:Reg>")" => Insts::LW(r,i,r2),
    "lbu" <r:Reg>","<i:Imm>"("<r2:Reg>")" => Insts::LBU(r,i,r2),
    "lhu" <r:Reg>","<i:Imm>"("<r2:Reg>")" => Insts::LHU(r,i,r2),
    "sb" <r:Reg>","<i:Imm>"("<r2:Reg>")" => Insts::SB(r,i,r2),
    "sh" <r:Reg>","<i:Imm>"("<r2:Reg>")" => Insts::SH(r,i,r2),
    "sw" <r:Reg>","<i:Imm>"("<r2:Reg>")" => Insts::SW(r,i,r2),
    "jal" <r:Reg>","<i:Imm> => Insts::JAL(r,i),
    "jalr" <r:Reg>","<r2:Reg>","<i:Imm> => Insts::JALR(r,r2,i),
    "jalr" <r:Reg>","<r2:Reg>","<l:Label> => Insts::JALRL(r,r2,l),
    "beq" <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BEQ(r,r2,i),
    "bne" <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BNE(r,r2,i),
    "blt" <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BLT(r,r2,i),
    "bge" <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BGE(r,r2,i),
    "bltu" <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BLTU(r,r2,i),
    "bgeu" <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BGEU(r,r2,i),

    "beq" <r:Reg>","<r2:Reg>","<l:Label> => Insts::BEQL(r,r2,l),
    "bne" <r:Reg>","<r2:Reg>","<l:Label> => Insts::BNEL(r,r2,l),
    "blt" <r:Reg>","<r2:Reg>","<l:Label> => Insts::BLTL(r,r2,l),
    "bge" <r:Reg>","<r2:Reg>","<l:Label> => Insts::BGEL(r,r2,l),
    "bltu" <r:Reg>","<r2:Reg>","<l:Label> => Insts::BLTUL(r,r2,l),
    "bgeu" <r:Reg>","<r2:Reg>","<l:Label> => Insts::BGEUL(r,r2,l),

    "la" <r:Reg> ","<i:Imm> => Insts::LA(r,i),
    "la" <r:Reg>","<l:Label> => Insts::LAL(r,l),


    "lb"  <r:Reg>","<l:Label> => Insts::LBL(r,l),
    "lh"  <r:Reg>","<l:Label> => Insts::LHL(r,l),
    "lw"  <r:Reg>","<l:Label> => Insts::LWL(r,l),
    "sb"  <r:Reg>","<l:Label> ","<r2:Reg> => Insts::SBL(r,l,r2),
    "sh"  <r:Reg>","<l:Label> ","<r2:Reg> => Insts::SHL(r,l,r2),
    "sw"  <r:Reg>","<l:Label> ","<r2:Reg> => Insts::SWL(r,l,r2),
    "nop" => Insts::ADDI(0,0,0),
    "li"  <r:Reg>","<i:Imm> => Insts::ADDI(r,0,i),
    "mv"  <r:Reg>"," <r2:Reg> => Insts::ADDI(r,r2,0),
    "not"  <r:Reg>","<r2:Reg> => Insts::XORI(r,r2,-1),
    "neg"  <r:Reg>","<r2:Reg> => Insts::SUB(r,0,r2),
    "seqz"  <r:Reg> ","<r2:Reg> => Insts::SLTIU(r,r2,1),
    "snez"  <r:Reg> ","<r2:Reg> => Insts::SLTU(r,0,r2),
    "sltz"  <r:Reg> ","<r2:Reg> => Insts::SLT(r,r2,0),
    "sgtz"  <r:Reg> ","<r2:Reg> => Insts::SLT(r,0,r2),
    "beqz"  <r:Reg>","<i:Imm> => Insts::BEQ(r,0,i),
    "bnez"  <r:Reg>","<i:Imm> => Insts::BNE(r,0,i),
    "blez"  <r:Reg>","<i:Imm> => Insts::BGE(0,r,i),
    "bgez"  <r:Reg>","<i:Imm> => Insts::BGE(r,0,i),
    "bltz"  <r:Reg>","<i:Imm> => Insts::BLT(r,0,i),
    "bgtz"  <r:Reg>","<i:Imm> => Insts::BLT(0,r,i),

    "beqz"  <r:Reg>","<l:Label> => Insts::BEQL(r,0,l),
    "bnez"  <r:Reg>","<l:Label> => Insts::BNEL(r,0,l),
    "blez"  <r:Reg>","<l:Label> => Insts::BGEL(0,r,l),
    "bgez"  <r:Reg>","<l:Label> => Insts::BGEL(r,0,l),
    "bltz"  <r:Reg>","<l:Label> => Insts::BLTL(r,0,l),
    "bgtz"  <r:Reg>","<l:Label> => Insts::BLTL(0,r,l),

    "bgt"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BLT(r2,r,i),
    "ble"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BGE(r2,r,i),
    "bgtu"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BLTU(r2,r,i),
    "bleu"  <r:Reg>","<r2:Reg>","<i:Imm> => Insts::BGEU(r2,r,i),
    "bgt"  <r:Reg>","<r2:Reg>","<l:Label> => Insts::BLTL(r2,r,l),
    "ble"  <r:Reg>","<r2:Reg>","<l:Label> => Insts::BGEL(r2,r,l),
    "bgtu"  <r:Reg>","<r2:Reg>","<l:Label> => Insts::BLTUL(r2,r,l),
    "bleu"  <r:Reg>","<r2:Reg>","<l:Label> => Insts::BGEUL(r2,r,l),

    "j"  <l:Label> => Insts::JALL(0,l),
    "j"  <i:Imm> => Insts::JAL(0,i),
    "jal"  <i:Imm> => Insts::JAL(1,i),
    "jal" <l:Label> => Insts::JALL(1,l),
    "jr"  <r:Reg> => Insts::JALR(0,r,0),
    "jalr"  <r:Reg> => Insts::JALR(1,r,0),
    "ret"=> Insts::JALR(0,1,0),
    "call"  <i:Imm> => Insts::CALL(i),
    "call"  <l:Label> => Insts::CALLL(l),
    "tail"  <i:Imm> => Insts::TAIL(i),
    "tail"  <l:Label> => Insts::TAILL(l)

};
Imm :i32 ={
    <s:r"-*[0-9]+"> => s.parse().unwrap()
};

Label :String = {
    <s:r"[.|A-z][A-z|0-9]*"> => s.to_string()
};

Reg:u8={
        "zero"=>0,
        "x0"=>0,
        "ra"=>1,
        "sp"=>2,
        "gp"=>3,
        "tp"=>4,
        "t0"=>5,
        "t1"=>6,
        "t2"=>7,
        "s0"=>8,
        "fp"=>8,
        "s1"=>9,
        "a0"=>10,
        "a1"=>11,
        "a2"=>12,
        "a3"=>13,
        "a4"=>14,
        "a5"=>15,
        "a6"=>16,
        "a7"=>17,
        "s2"=>18,
        "s3"=>19,
        "s4"=>20,
        "s5"=>21,
        "s6"=>22,
        "s7"=>23,
        "s8"=>24,
        "s9"=>25,
        "s10"=>26,
        "s11"=>27,
        "t3"=>28,
        "t4"=>29,
        "t5"=>30,
        "t6"=>31,
};