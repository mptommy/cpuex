type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MINUS_DOT
  | PLUS_DOT
  | AST
  | SLASH
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ()) (* xを未定義の型変数とする *)
(* %prec Symbolによりデフォルトの優先度と関連性を、指定されたシンボルのものに上書き出来る。 *)
# 44 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MINUS_DOT *);
  264 (* PLUS_DOT *);
  265 (* AST *);
  266 (* SLASH *);
  267 (* AST_DOT *);
  268 (* SLASH_DOT *);
  269 (* EQUAL *);
  270 (* LESS_GREATER *);
  271 (* LESS_EQUAL *);
  272 (* GREATER_EQUAL *);
  273 (* LESS *);
  274 (* GREATER *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  279 (* LET *);
  280 (* IN *);
  281 (* REC *);
  282 (* COMMA *);
  283 (* ARRAY_CREATE *);
  284 (* DOT *);
  285 (* LESS_MINUS *);
  286 (* SEMICOLON *);
  287 (* LPAREN *);
  288 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  278 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\007\000\007\000\004\000\
\004\000\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\006\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\006\000\005\000\002\000\001\000\008\000\
\007\000\003\000\003\000\001\000\004\000\002\000\001\000\002\000\
\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\036\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\011\000\021\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\024\000\025\000\026\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\000\000\045\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000\051\000\046\000\017\000\053\000\079\000"

let yysindex = "\003\000\
\151\255\000\000\000\000\000\000\000\000\000\000\151\255\151\255\
\151\255\151\255\000\000\234\254\065\255\111\255\199\002\051\255\
\237\254\000\000\000\000\000\000\095\002\251\254\244\254\245\254\
\058\255\000\000\178\255\151\255\151\255\151\255\151\255\151\255\
\151\255\151\255\151\255\151\255\151\255\151\255\151\255\151\255\
\151\255\151\255\151\255\238\254\247\254\065\255\151\255\151\255\
\151\255\254\254\253\254\005\255\236\254\001\255\247\254\000\000\
\060\255\060\255\060\255\060\255\000\000\000\000\000\000\000\000\
\018\255\018\255\018\255\018\255\018\255\018\255\234\255\199\002\
\151\255\247\254\234\255\121\002\147\002\254\254\021\255\151\255\
\036\255\040\255\050\255\151\255\206\255\151\255\151\255\000\000\
\151\255\199\002\000\000\000\000\151\255\067\002\035\255\225\002\
\199\002\199\002\173\002\000\000\151\255\151\255\225\002\199\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\074\000\093\000\
\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\202\000\000\000\033\000\121\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\149\000\000\000\
\230\000\005\001\037\001\069\001\000\000\000\000\000\000\000\000\
\090\001\112\001\140\001\168\001\196\001\221\001\239\001\209\000\
\000\000\065\000\252\001\000\000\000\000\062\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\002\000\000\000\000\000\000\000\000\001\000\003\002\
\032\002\052\255\000\000\000\000\000\000\000\000\016\002\039\002"

let yygindex = "\000\000\
\008\000\245\255\000\000\000\000\000\000\000\000\255\255"

let yytablesize = 1019
let yytable = "\022\000\
\007\000\025\000\023\000\001\000\045\000\082\000\047\000\049\000\
\024\000\050\000\052\000\083\000\073\000\055\000\018\000\019\000\
\020\000\021\000\054\000\078\000\080\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\081\000\084\000\
\041\000\089\000\074\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\004\000\005\000\006\000\075\000\076\000\
\077\000\091\000\004\000\005\000\006\000\092\000\093\000\101\000\
\040\000\004\000\005\000\006\000\032\000\033\000\034\000\035\000\
\011\000\046\000\039\000\037\000\088\000\000\000\044\000\011\000\
\085\000\014\000\000\000\000\000\000\000\054\000\011\000\090\000\
\014\000\000\000\000\000\094\000\008\000\096\000\097\000\014\000\
\098\000\000\000\000\000\000\000\099\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\103\000\104\000\003\000\004\000\
\005\000\006\000\007\000\008\000\000\000\009\000\000\000\000\000\
\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\000\000\011\000\012\000\000\000\000\000\
\000\000\013\000\000\000\000\000\000\000\014\000\026\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\003\000\004\000\
\005\000\006\000\007\000\008\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\000\000\011\000\012\000\000\000\000\000\
\031\000\013\000\000\000\000\000\000\000\014\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\000\000\000\000\000\000\000\000\
\000\000\009\000\000\000\042\000\000\000\000\000\000\000\043\000\
\034\000\056\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\000\000\000\000\000\000\000\000\000\000\013\000\000\000\042\000\
\000\000\000\000\000\000\043\000\000\000\095\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\012\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\000\000\007\000\007\000\007\000\000\000\
\007\000\000\000\007\000\000\000\007\000\000\000\007\000\007\000\
\007\000\041\000\041\000\041\000\023\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\041\000\041\000\041\000\000\000\
\041\000\000\000\041\000\000\000\000\000\000\000\041\000\041\000\
\041\000\040\000\040\000\040\000\022\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\040\000\040\000\040\000\000\000\
\040\000\014\000\040\000\000\000\000\000\000\000\040\000\040\000\
\040\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\015\000\
\008\000\008\000\000\000\000\000\008\000\000\000\008\000\000\000\
\000\000\000\000\008\000\000\000\008\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\018\000\030\000\030\000\000\000\000\000\
\030\000\000\000\030\000\000\000\000\000\000\000\030\000\000\000\
\030\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\019\000\
\035\000\035\000\000\000\000\000\035\000\000\000\035\000\000\000\
\000\000\000\000\035\000\000\000\035\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\016\000\031\000\031\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\031\000\009\000\
\031\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\017\000\009\000\009\000\000\000\
\000\000\009\000\000\000\009\000\034\000\034\000\000\000\009\000\
\034\000\009\000\013\000\013\000\013\000\013\000\043\000\000\000\
\034\000\000\000\013\000\013\000\013\000\013\000\013\000\013\000\
\000\000\013\000\013\000\042\000\000\000\013\000\000\000\013\000\
\000\000\000\000\020\000\013\000\000\000\013\000\000\000\000\000\
\000\000\012\000\012\000\012\000\012\000\000\000\000\000\033\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\
\012\000\012\000\000\000\000\000\012\000\029\000\012\000\028\000\
\000\000\000\000\012\000\000\000\012\000\000\000\032\000\000\000\
\000\000\023\000\023\000\023\000\023\000\000\000\000\000\000\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\023\000\023\000\000\000\000\000\023\000\000\000\023\000\000\000\
\000\000\000\000\023\000\000\000\023\000\000\000\000\000\000\000\
\000\000\022\000\022\000\022\000\022\000\000\000\000\000\000\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\022\000\022\000\000\000\000\000\022\000\000\000\022\000\000\000\
\000\000\000\000\022\000\000\000\022\000\000\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\014\000\014\000\000\000\
\000\000\014\000\000\000\014\000\000\000\000\000\000\000\014\000\
\000\000\014\000\000\000\000\000\015\000\015\000\015\000\015\000\
\015\000\015\000\000\000\015\000\015\000\000\000\000\000\015\000\
\000\000\015\000\000\000\000\000\000\000\015\000\000\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\018\000\000\000\000\000\018\000\000\000\018\000\000\000\000\000\
\000\000\018\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\000\000\000\000\019\000\
\000\000\019\000\000\000\000\000\000\000\019\000\000\000\019\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\016\000\016\000\016\000\016\000\016\000\000\000\016\000\
\016\000\000\000\000\000\016\000\000\000\016\000\000\000\000\000\
\000\000\016\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
\017\000\017\000\000\000\000\000\017\000\000\000\017\000\000\000\
\000\000\000\000\017\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\043\000\043\000\000\000\000\000\043\000\000\000\
\043\000\000\000\000\000\000\000\043\000\000\000\043\000\042\000\
\042\000\000\000\000\000\042\000\000\000\042\000\020\000\020\000\
\000\000\042\000\020\000\042\000\000\000\000\000\000\000\000\000\
\020\000\000\000\020\000\033\000\033\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\033\000\
\000\000\029\000\029\000\028\000\028\000\029\000\000\000\028\000\
\000\000\000\000\032\000\032\000\000\000\029\000\032\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\043\000\000\000\100\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\000\000\000\000\043\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\000\000\000\000\086\000\000\000\000\000\
\000\000\000\000\042\000\000\000\000\000\000\000\043\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\000\000\000\000\000\000\
\000\000\000\000\087\000\000\000\042\000\000\000\000\000\000\000\
\043\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\000\000\
\000\000\000\000\000\000\000\000\102\000\000\000\042\000\000\000\
\000\000\000\000\043\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\000\000\000\000\043\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000"

let yycheck = "\022\001\
\000\000\013\000\025\001\001\000\016\000\026\001\026\001\013\001\
\031\001\022\001\022\001\032\001\031\001\025\000\007\000\008\000\
\009\000\010\000\028\001\022\001\024\001\014\000\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\026\001\031\001\
\000\000\013\001\046\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\001\001\002\001\003\001\047\000\048\000\
\049\000\022\001\001\001\002\001\003\001\022\001\013\001\029\001\
\000\000\001\001\002\001\003\001\009\001\010\001\011\001\012\001\
\022\001\000\000\013\001\024\001\078\000\255\255\028\001\022\001\
\073\000\031\001\255\255\255\255\255\255\028\001\022\001\080\000\
\031\001\255\255\255\255\084\000\000\000\086\000\087\000\031\001\
\089\000\255\255\255\255\255\255\093\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\101\000\102\000\000\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\022\001\023\001\255\255\255\255\
\255\255\027\001\255\255\255\255\255\255\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\000\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\022\001\023\001\255\255\255\255\
\000\000\027\001\255\255\255\255\255\255\031\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\026\001\255\255\255\255\255\255\030\001\
\000\000\032\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\026\001\
\255\255\255\255\255\255\030\001\255\255\032\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\028\001\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\022\001\255\255\
\024\001\000\000\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\255\255\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\030\001\006\001\
\032\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\000\000\020\001\021\001\255\255\
\255\255\024\001\255\255\026\001\020\001\021\001\255\255\030\001\
\024\001\032\001\005\001\006\001\007\001\008\001\000\000\255\255\
\032\001\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\021\001\000\000\255\255\024\001\255\255\026\001\
\255\255\255\255\000\000\030\001\255\255\032\001\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\255\255\255\255\000\000\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\024\001\000\000\026\001\000\000\
\255\255\255\255\030\001\255\255\032\001\255\255\000\000\255\255\
\255\255\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\026\001\255\255\255\255\255\255\030\001\
\255\255\032\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\030\001\255\255\032\001\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\020\001\021\001\
\255\255\030\001\024\001\032\001\255\255\255\255\255\255\255\255\
\030\001\255\255\032\001\020\001\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\020\001\021\001\020\001\021\001\024\001\255\255\024\001\
\255\255\255\255\020\001\021\001\255\255\032\001\024\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\255\255\255\255\
\030\001\255\255\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\030\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\026\001\255\255\255\255\255\255\030\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\026\001\255\255\255\255\255\255\
\030\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\030\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST\000\
  SLASH\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 66 "parser.mly"
    ( _2 )
# 458 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
    ( Unit )
# 464 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 70 "parser.mly"
    ( Bool(_1) )
# 471 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 72 "parser.mly"
    ( Int(_1) )
# 478 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 74 "parser.mly"
    ( Float(_1) )
# 485 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 76 "parser.mly"
    ( Var(_1) )
# 492 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 78 "parser.mly"
    ( Get(_1, _4) )
# 500 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 82 "parser.mly"
    ( _1 )
# 507 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 84 "parser.mly"
    ( _1 )
# 514 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 87 "parser.mly"
    ( Not(_2) )
# 521 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 90 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 530 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 94 "parser.mly"
    ( Add(_1, _3) )
# 538 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
    ( Sub(_1, _3) )
# 546 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 98 "parser.mly"
    ( Eq(_1, _3) )
# 554 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 562 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( Not(LE(_3, _1)) )
# 570 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
    ( Not(LE(_1, _3)) )
# 578 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
    ( LE(_1, _3) )
# 586 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
    ( LE(_3, _1) )
# 594 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
    ( If(_2, _4, _6) )
# 603 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( FNeg(_2) )
# 610 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
    ( FAdd(_1, _3) )
# 618 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
    ( FSub(_1, _3) )
# 626 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
    ( Mul(_1, _3) )
# 634 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 122 "parser.mly"
    ( Div(_1, _3) )
# 642 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
    ( FMul(_1, _3) )
# 650 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( FDiv(_1, _3) )
# 658 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 129 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 667 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( LetRec(_3, _5) )
# 675 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 135 "parser.mly"
    ( App(_1, _2) )
# 683 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 138 "parser.mly"
    ( Tuple(_1) )
# 690 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 699 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 142 "parser.mly"
    ( Put(_1, _4, _7) )
# 708 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 144 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 716 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 147 "parser.mly"
    ( Array(_2, _3) )
# 724 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near characters %d-%d"
           (Parsing.symbol_start ())
           (Parsing.symbol_end ())) )
# 733 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 156 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 742 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 160 "parser.mly"
    ( addtyp _1 :: _2 )
# 750 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 162 "parser.mly"
    ( [addtyp _1] )
# 757 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 167 "parser.mly"
    ( _1 @ [_2] )
# 765 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 170 "parser.mly"
    ( [_1] )
# 772 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 174 "parser.mly"
    ( _1 @ [_3] )
# 780 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 176 "parser.mly"
    ( [_1; _3] )
# 788 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 180 "parser.mly"
    ( _1 @ [addtyp _3] )
# 796 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 182 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 804 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
